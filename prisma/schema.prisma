// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(uuid())
  name       String
  email      String @unique
  password   String
  role       Role
  contactNo  String
  address    String
  profileImg String

  reviewAndRatings ReviewAndRating[]
  orders           Order[]

  @@map("users")
}

enum Role {
  admin
  customer
}

model Category {
  id    String @id @default(uuid())
  title String

  books Book[]

  @@map("categories")
}

model Book {
  id              String @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  reviewAndRatings ReviewAndRating[]

  @@map("books")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  @@map("review_and_ratings")
}

// model Order {
//   id           String   @id @default(uuid())
//   orderedBooks Json[]
//   status       Status   @default(pending)
//   createdAt    DateTime @default(now())

//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   @@map("orders")
// }

model Order {
  id           String   @id @default(uuid()) // Use UUID as the ID type
  userId       String // UUID representing the user who placed the order
  orderedBooks Json // JSON field for storing an array of book objects
  status       Status   @default(pending) // Default to 'pending'
  createdAt    DateTime @default(now()) // Timestamp for order creation

  // Define a foreign key relationship with the User model
  user User @relation(fields: [userId], references: [id])

  @@map("orders")
}

// model OrderBook {
//   id        String   @id @default(uuid())
//   quantity  Int

//   bookId    String
//   book      Book     @relation(fields: [bookId], references: [id])

//   orderId   Int
//   order     Order    @relation(fields: [orderId], references: [id])
// }

enum Status {
  pending
  shipped
  delivered
}
